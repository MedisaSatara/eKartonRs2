// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eKarton.Service.Databases;

#nullable disable

namespace eKarton.Service.Migrations
{
    [DbContext(typeof(eKartonContext))]
    [Migration("20240908153028_updateOboljenjaPacijenta")]
    partial class updateOboljenjaPacijenta
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eKarton.Service.Databases.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministratorId"), 1L, 1);

                    b.Property<int>("BolnicaId")
                        .HasColumnType("int");

                    b.Property<string>("DatumRodjenja")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prebivaliste")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AdministratorId");

                    b.HasIndex("BolnicaId");

                    b.ToTable("Administrator", (string)null);

                    b.HasData(
                        new
                        {
                            AdministratorId = 1007,
                            BolnicaId = 1000,
                            DatumRodjenja = "1998/12/16",
                            Email = "arijanahusic@gmail.com",
                            Ime = "Arijana",
                            Prebivaliste = "Sarajevo",
                            Prezime = "Husic",
                            Telefon = "063 246 022"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Bolnica", b =>
                {
                    b.Property<int>("BolnicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BolnicaId"), 1L, 1);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BolnicaId");

                    b.ToTable("Bolnica", (string)null);

                    b.HasData(
                        new
                        {
                            BolnicaId = 1000,
                            Adresa = " Maršala Tita 294, Mostar 88000",
                            Email = "bolnica@gmail.com",
                            Naziv = "Kantonalna bolnica 'Dr.Safet Mujić'",
                            Telefon = " 036 503-100"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.DodjeljeniDoktor", b =>
                {
                    b.Property<int>("DodjeljeniDoktorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DodjeljeniDoktorId"), 1L, 1);

                    b.Property<string>("DatumOd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.HasKey("DodjeljeniDoktorId");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.ToTable("DodjeljeniDoktor", (string)null);

                    b.HasData(
                        new
                        {
                            DodjeljeniDoktorId = 3,
                            DatumOd = "12.12.2020",
                            DoktorId = 3001,
                            PacijentId = 5001
                        },
                        new
                        {
                            DodjeljeniDoktorId = 4,
                            DatumOd = "01.10.2021",
                            DoktorId = 3007,
                            PacijentId = 5002
                        },
                        new
                        {
                            DodjeljeniDoktorId = 5,
                            DatumOd = "22.04.2020",
                            DoktorId = 3008,
                            PacijentId = 5003
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Doktor", b =>
                {
                    b.Property<int>("DoktorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoktorId"), 1L, 1);

                    b.Property<string>("DatumRodjenja")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Grad")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Jmbg")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("JMBG");

                    b.Property<int>("OdjelId")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Spol")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DoktorId");

                    b.HasIndex("OdjelId");

                    b.ToTable("Doktor", (string)null);

                    b.HasData(
                        new
                        {
                            DoktorId = 3001,
                            DatumRodjenja = "1998/12/15",
                            Email = "stanija@gmail.com",
                            Grad = "Sarajevo",
                            Ime = "STANIJA",
                            Jmbg = "1215988789654",
                            OdjelId = 2001,
                            Prezime = "TOKMAKČIJA",
                            Spol = "Z",
                            StateMachine = "active",
                            Telefon = "063 246 022"
                        },
                        new
                        {
                            DoktorId = 3002,
                            DatumRodjenja = "1988-01-02",
                            Email = "radas@gmail.com",
                            Grad = "Mostar",
                            Ime = "Rada",
                            Jmbg = "0102988789654",
                            OdjelId = 2006,
                            Prezime = "Šandrk",
                            Spol = "Z",
                            StateMachine = "active",
                            Telefon = "063 246 722"
                        },
                        new
                        {
                            DoktorId = 3003,
                            DatumRodjenja = "1980-10-02",
                            Email = "jelenap@gmail.com",
                            Grad = "Sarajevo",
                            Ime = "Jelena",
                            Jmbg = "1002980789654",
                            OdjelId = 2006,
                            Prezime = "Pavlovic",
                            Spol = "Z",
                            StateMachine = "active",
                            Telefon = "063 216 722"
                        },
                        new
                        {
                            DoktorId = 3004,
                            DatumRodjenja = "1975-12-09",
                            Email = "markom@gmail.com",
                            Grad = "Sarajevo",
                            Ime = "Marko",
                            Jmbg = "2099750789654",
                            OdjelId = 2005,
                            Prezime = "Martinac",
                            Spol = "M",
                            StateMachine = "active",
                            Telefon = "063 216 722"
                        },
                        new
                        {
                            DoktorId = 3005,
                            DatumRodjenja = "1990 - 07 - 05",
                            Email = "bznada@gmail.com",
                            Grad = "Mostar",
                            Ime = "Nada",
                            Jmbg = "0507990078965",
                            OdjelId = 2005,
                            Prezime = "Bazina",
                            Spol = "Z",
                            StateMachine = "archived",
                            Telefon = "062 216 722"
                        },
                        new
                        {
                            DoktorId = 3006,
                            DatumRodjenja = "1989 - 06 - 28",
                            Email = "adnaz@gmail.com",
                            Grad = "Mostar",
                            Ime = "Adna",
                            Jmbg = "2806989789654",
                            OdjelId = 2004,
                            Prezime = "Zalihic",
                            Spol = "Z",
                            StateMachine = "draft",
                            Telefon = "061 216 722"
                        },
                        new
                        {
                            DoktorId = 3007,
                            DatumRodjenja = "1980 - 02 - 03",
                            Email = "rankog@gmail.com",
                            Grad = "Tuzla",
                            Ime = "Ranko",
                            Jmbg = "2039801236547",
                            OdjelId = 2001,
                            Prezime = "Gacic",
                            Spol = "M",
                            StateMachine = "draft",
                            Telefon = "062 317 722"
                        },
                        new
                        {
                            DoktorId = 3008,
                            DatumRodjenja = "1970 - 11 - 11",
                            Email = "nikolinas@gmail.com",
                            Grad = "Mostar",
                            Ime = "Nikolina",
                            Jmbg = "1111197523974",
                            OdjelId = 2001,
                            Prezime = "Soce",
                            Spol = "Z",
                            StateMachine = "cancelled",
                            Telefon = "062 216 722"
                        },
                        new
                        {
                            DoktorId = 3009,
                            DatumRodjenja = "1971 - 03 - 22",
                            Email = "editas@gmail.com",
                            Grad = "Stolac",
                            Ime = "Edita",
                            Jmbg = "2203197154239",
                            OdjelId = 2001,
                            Prezime = "Sopta",
                            Spol = "Z",
                            StateMachine = "active",
                            Telefon = "062 216 722"
                        },
                        new
                        {
                            DoktorId = 3010,
                            DatumRodjenja = "1971 - 05 - 11",
                            Email = "gordanap@gmail.com",
                            Grad = "Mostar",
                            Ime = "Gordana",
                            Jmbg = "1105971289654",
                            OdjelId = 2001,
                            Prezime = "Pivic",
                            Spol = "Z",
                            StateMachine = "active",
                            Telefon = "062 216 722"
                        },
                        new
                        {
                            DoktorId = 3011,
                            DatumRodjenja = "1980 - 11 - 19",
                            Email = "senadv@gmail.com",
                            Grad = "Mostar",
                            Ime = "Senad",
                            Jmbg = "1911980647123",
                            OdjelId = 2002,
                            Prezime = "Vujica",
                            Spol = "M",
                            StateMachine = "archived",
                            Telefon = "062 216 722"
                        },
                        new
                        {
                            DoktorId = 3012,
                            DatumRodjenja = "1985 - 06 - 22",
                            Email = "sandrab@gmail.com",
                            Grad = "Sarajevo",
                            Ime = "Sandra",
                            Jmbg = "2206985452136",
                            OdjelId = 2003,
                            Prezime = "Brajkovic",
                            Spol = "Z",
                            StateMachine = "active",
                            Telefon = "062 216 722"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"), 1L, 1);

                    b.Property<string>("DatumRodjenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LozinkaHash")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LozinkaSalt")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Spol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KorisnikId");

                    b.ToTable("Korisnik", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikId = 1001,
                            DatumRodjenja = "1998/11/11",
                            Email = "administrator@gmail.com",
                            Ime = "Arijana",
                            KorisnickoIme = "admin",
                            LozinkaHash = "aylDusYLgDUQAWFTL4YrF7UrbsY=",
                            LozinkaSalt = "ADERoiiF+tR4/vzwpoZGxg==",
                            Prezime = "Husic",
                            Spol = "Z",
                            Telefon = "063 222 333"
                        },
                        new
                        {
                            KorisnikId = 1002,
                            DatumRodjenja = "1998/05/07",
                            Email = "korisnik@gmail.com",
                            Ime = "Medisa",
                            KorisnickoIme = "korisnik",
                            LozinkaHash = "1kVTJJgXoRN4wnR9jlpGdIbbrvI=",
                            LozinkaSalt = "oM0gdQiandRzK89XpteLeg==",
                            Prezime = "Satara",
                            Spol = "Z",
                            Telefon = "063 111 333"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.KorisnikUloga", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikUlogaId"), 1L, 1);

                    b.Property<DateTime?>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikUlogaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisnikUloga");

                    b.HasData(
                        new
                        {
                            KorisnikUlogaId = 1,
                            DatumIzmjene = new DateTime(2024, 9, 8, 17, 30, 25, 207, DateTimeKind.Local).AddTicks(3478),
                            KorisnikId = 1001,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikUlogaId = 2,
                            DatumIzmjene = new DateTime(2024, 9, 8, 17, 30, 25, 207, DateTimeKind.Local).AddTicks(3529),
                            KorisnikId = 1002,
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Nalaz", b =>
                {
                    b.Property<int>("NalazId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NalazId"), 1L, 1);

                    b.Property<string>("Datum")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LicnaAnamneza")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("RadnaAnamneza")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NalazId");

                    b.HasIndex("PacijentId");

                    b.ToTable("Nalaz", (string)null);

                    b.HasData(
                        new
                        {
                            NalazId = 8001,
                            Datum = "2021-12-22",
                            LicnaAnamneza = "Upala uha",
                            PacijentId = 5001,
                            RadnaAnamneza = "Nema"
                        },
                        new
                        {
                            NalazId = 8002,
                            Datum = "2021-04-05",
                            LicnaAnamneza = "Ukljesten vrat",
                            PacijentId = 5001,
                            RadnaAnamneza = "Nema"
                        },
                        new
                        {
                            NalazId = 8003,
                            Datum = "2022-03-22",
                            LicnaAnamneza = "Upala pluca",
                            PacijentId = 5002,
                            RadnaAnamneza = "Nema"
                        },
                        new
                        {
                            NalazId = 8004,
                            Datum = "2022-09-01",
                            LicnaAnamneza = "Rutinska kontrola",
                            PacijentId = 5003,
                            RadnaAnamneza = "Nema"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Oboljenje", b =>
                {
                    b.Property<int>("OboljenjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OboljenjeId"), 1L, 1);

                    b.Property<string>("Dijagnoza")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Terapija")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("OboljenjeId");

                    b.ToTable("Oboljenje", (string)null);

                    b.HasData(
                        new
                        {
                            OboljenjeId = 8010,
                            Dijagnoza = "Dijabetis",
                            Terapija = "Inzulin"
                        },
                        new
                        {
                            OboljenjeId = 8020,
                            Dijagnoza = "Astma",
                            Terapija = "Pumpica"
                        },
                        new
                        {
                            OboljenjeId = 8021,
                            Dijagnoza = "Upala pluca",
                            Terapija = "Tablete"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.OcjenaDoktor", b =>
                {
                    b.Property<int>("OcjenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OcjenaId"), 1L, 1);

                    b.Property<bool?>("Anonimno")
                        .HasColumnType("bit");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("Ocjena")
                        .HasColumnType("int");

                    b.Property<string>("Razlog")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("OcjenaId")
                        .HasName("PK__OcjenaDo__E6FC7AA90F43BF09");

                    b.HasIndex("DoktorId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("OcjenaDoktor", (string)null);

                    b.HasData(
                        new
                        {
                            OcjenaId = 3100,
                            Anonimno = true,
                            DoktorId = 3001,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3200,
                            Anonimno = true,
                            DoktorId = 3002,
                            KorisnikId = 1002,
                            Ocjena = 5,
                            Razlog = "Odlican"
                        },
                        new
                        {
                            OcjenaId = 3300,
                            Anonimno = true,
                            DoktorId = 3009,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3400,
                            Anonimno = true,
                            DoktorId = 3001,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3500,
                            Anonimno = true,
                            DoktorId = 3002,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3600,
                            Anonimno = true,
                            DoktorId = 3003,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3700,
                            Anonimno = true,
                            DoktorId = 3004,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3800,
                            Anonimno = true,
                            DoktorId = 3010,
                            KorisnikId = 1002,
                            Ocjena = 5,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3900,
                            Anonimno = true,
                            DoktorId = 3011,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3301,
                            Anonimno = true,
                            DoktorId = 3012,
                            KorisnikId = 1002,
                            Ocjena = 3,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3302,
                            Anonimno = true,
                            DoktorId = 3007,
                            KorisnikId = 1002,
                            Ocjena = 2,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3303,
                            Anonimno = true,
                            DoktorId = 3008,
                            KorisnikId = 1002,
                            Ocjena = 8,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3304,
                            Anonimno = true,
                            DoktorId = 3006,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3305,
                            Anonimno = true,
                            DoktorId = 3005,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3306,
                            Anonimno = true,
                            DoktorId = 3005,
                            KorisnikId = 1002,
                            Ocjena = 2,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3307,
                            Anonimno = true,
                            DoktorId = 3005,
                            KorisnikId = 1002,
                            Ocjena = 3,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3308,
                            Anonimno = true,
                            DoktorId = 3005,
                            KorisnikId = 1002,
                            Ocjena = 5,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3309,
                            Anonimno = true,
                            DoktorId = 3005,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3405,
                            Anonimno = true,
                            DoktorId = 3007,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3505,
                            Anonimno = true,
                            DoktorId = 3007,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3605,
                            Anonimno = true,
                            DoktorId = 3008,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3705,
                            Anonimno = true,
                            DoktorId = 3008,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        },
                        new
                        {
                            OcjenaId = 3709,
                            Anonimno = true,
                            DoktorId = 3009,
                            KorisnikId = 1002,
                            Ocjena = 4,
                            Razlog = "Vrlo dobar"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Odjel", b =>
                {
                    b.Property<int>("OdjelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OdjelId"), 1L, 1);

                    b.Property<int>("BolnicaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OdjelId");

                    b.HasIndex("BolnicaId");

                    b.ToTable("Odjel", (string)null);

                    b.HasData(
                        new
                        {
                            OdjelId = 2001,
                            BolnicaId = 1000,
                            Naziv = "Obiteljska medicina",
                            Telefon = "033/853-222"
                        },
                        new
                        {
                            OdjelId = 2002,
                            BolnicaId = 1000,
                            Naziv = "Stomatologija",
                            Telefon = "033/853-555"
                        },
                        new
                        {
                            OdjelId = 2003,
                            BolnicaId = 1000,
                            Naziv = "Neurologija",
                            Telefon = "033/853-552"
                        },
                        new
                        {
                            OdjelId = 2004,
                            BolnicaId = 1000,
                            Naziv = "Ginekologija",
                            Telefon = "033/853-553"
                        },
                        new
                        {
                            OdjelId = 2005,
                            BolnicaId = 1000,
                            Naziv = "Psihijatrija",
                            Telefon = "033/853-543"
                        },
                        new
                        {
                            OdjelId = 2006,
                            BolnicaId = 1000,
                            Naziv = "Pedijatrija",
                            Telefon = "033/853-743"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Osiguranje", b =>
                {
                    b.Property<int>("OsiguranjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OsiguranjeId"), 1L, 1);

                    b.Property<string>("Osiguranik")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("OsiguranjeId");

                    b.ToTable("Osiguranje", (string)null);

                    b.HasData(
                        new
                        {
                            OsiguranjeId = 4001,
                            Osiguranik = "Intera"
                        },
                        new
                        {
                            OsiguranjeId = 4002,
                            Osiguranik = "Josip 'Biro'"
                        },
                        new
                        {
                            OsiguranjeId = 4003,
                            Osiguranik = "Hercegovina promet"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Pacijent", b =>
                {
                    b.Property<int>("PacijentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacijentId"), 1L, 1);

                    b.Property<string>("Alergija")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BrojKartona")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasMaxLength(10)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HronicneBolesti")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Jmbg")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("JMBG");

                    b.Property<bool?>("Koagulopatija")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("KrvnaGrupa")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MjestoRodjenja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prebivaliste")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RhFaktor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Spol")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PacijentId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Pacijent", (string)null);

                    b.HasData(
                        new
                        {
                            PacijentId = 5001,
                            Alergija = "Ne",
                            BrojKartona = "14B579",
                            DatumRodjenja = new DateTime(1998, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "josip@gmail.com",
                            HronicneBolesti = "Nema",
                            Ime = "Josip",
                            Jmbg = "1211998796541",
                            Koagulopatija = false,
                            KrvnaGrupa = "AB",
                            MjestoRodjenja = "Mostar",
                            Prebivaliste = "Mostar",
                            Prezime = "Bojcic",
                            RhFaktor = "+",
                            Spol = "M",
                            Telefon = "061 201 022"
                        },
                        new
                        {
                            PacijentId = 5002,
                            Alergija = "Antibiotik",
                            BrojKartona = "19378A",
                            DatumRodjenja = new DateTime(1980, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "helena@gmail.com",
                            HronicneBolesti = "Nema",
                            Ime = "Helena",
                            Jmbg = "5089801236547",
                            Koagulopatija = false,
                            KrvnaGrupa = "A",
                            MjestoRodjenja = "Mostar",
                            Prebivaliste = "Mostar",
                            Prezime = "Radic",
                            RhFaktor = "+",
                            Spol = "Z",
                            Telefon = "062 201 022"
                        },
                        new
                        {
                            PacijentId = 5003,
                            Alergija = "Ne",
                            BrojKartona = "8537C",
                            DatumRodjenja = new DateTime(1992, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melita@gmail.com",
                            HronicneBolesti = "Nema",
                            Ime = "Melita",
                            Jmbg = "5089801236547",
                            Koagulopatija = false,
                            KrvnaGrupa = "AB",
                            MjestoRodjenja = "Stolac",
                            Prebivaliste = "Mostar",
                            Prezime = "Golubica",
                            RhFaktor = "-",
                            Spol = "Z",
                            Telefon = "063 991 022"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.PacijentOboljenja", b =>
                {
                    b.Property<int>("PacijentOboljenjaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacijentOboljenjaId"), 1L, 1);

                    b.Property<string>("NesposobanZaRad")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NesposobanZaRadDo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NesposobanZaRadOd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("OboljenjeId")
                        .HasColumnType("int");

                    b.Property<int?>("PacijentId")
                        .HasColumnType("int");

                    b.HasKey("PacijentOboljenjaId");

                    b.HasIndex("OboljenjeId");

                    b.HasIndex("PacijentId");

                    b.ToTable("PacijentOboljenja", (string)null);

                    b.HasData(
                        new
                        {
                            PacijentOboljenjaId = 10,
                            NesposobanZaRad = "Da",
                            NesposobanZaRadDo = "12-05-2023",
                            NesposobanZaRadOd = "12-05-2022",
                            OboljenjeId = 8010,
                            PacijentId = 5002
                        },
                        new
                        {
                            PacijentOboljenjaId = 11,
                            NesposobanZaRad = "Ne",
                            NesposobanZaRadDo = " ",
                            NesposobanZaRadOd = " ",
                            OboljenjeId = 8010,
                            PacijentId = 5001
                        },
                        new
                        {
                            PacijentOboljenjaId = 12,
                            NesposobanZaRad = "Da",
                            NesposobanZaRadDo = "22-02-2024",
                            NesposobanZaRadOd = "12-01-2024",
                            OboljenjeId = 8020,
                            PacijentId = 5001
                        },
                        new
                        {
                            PacijentOboljenjaId = 13,
                            NesposobanZaRad = "Ne",
                            NesposobanZaRadDo = " ",
                            NesposobanZaRadOd = " ",
                            OboljenjeId = 8021,
                            PacijentId = 5003
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.PacijentOsiguranje", b =>
                {
                    b.Property<int>("PacijentOsiguranjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacijentOsiguranjeId"), 1L, 1);

                    b.Property<string>("DatumOsiguranja")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("OsiguranjeId")
                        .HasColumnType("int");

                    b.Property<int?>("PacijentId")
                        .HasColumnType("int");

                    b.Property<bool?>("Vazece")
                        .HasColumnType("bit");

                    b.HasKey("PacijentOsiguranjeId");

                    b.HasIndex("OsiguranjeId");

                    b.HasIndex("PacijentId");

                    b.ToTable("PacijentOsiguranje", (string)null);

                    b.HasData(
                        new
                        {
                            PacijentOsiguranjeId = 6,
                            DatumOsiguranja = "25.04.2023",
                            OsiguranjeId = 4001,
                            PacijentId = 5001,
                            Vazece = true
                        },
                        new
                        {
                            PacijentOsiguranjeId = 7,
                            DatumOsiguranja = "01.05.2023",
                            OsiguranjeId = 4002,
                            PacijentId = 5002,
                            Vazece = true
                        },
                        new
                        {
                            PacijentOsiguranjeId = 8,
                            DatumOsiguranja = "30.02.2022",
                            OsiguranjeId = 4003,
                            PacijentId = 5003,
                            Vazece = true
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.PacijentVakcinacija", b =>
                {
                    b.Property<int>("PacijentVakcinacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacijentVakcinacijaId"), 1L, 1);

                    b.Property<string>("Datum")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Doza")
                        .HasColumnType("int");

                    b.Property<string>("Lokacija")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int?>("VakcinacijaId")
                        .HasColumnType("int");

                    b.HasKey("PacijentVakcinacijaId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("VakcinacijaId");

                    b.ToTable("PacijentVakcinacija", (string)null);

                    b.HasData(
                        new
                        {
                            PacijentVakcinacijaId = 9,
                            Datum = "2021-12-22",
                            Doza = 2,
                            Lokacija = "Mostar",
                            PacijentId = 5002,
                            VakcinacijaId = 7111
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Pregled", b =>
                {
                    b.Property<int>("PregledId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PregledId"), 1L, 1);

                    b.Property<DateTime?>("Datum")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<string>("Dijagnoza")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("RazlogPosjete")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TerapijaId")
                        .HasColumnType("int");

                    b.Property<int>("UputnicaId")
                        .HasColumnType("int");

                    b.HasKey("PregledId");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("TerapijaId");

                    b.HasIndex("UputnicaId");

                    b.ToTable("Pregled", (string)null);

                    b.HasData(
                        new
                        {
                            PregledId = 6110,
                            Datum = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dijagnoza = "Upala srednjeg uha",
                            DoktorId = 3001,
                            PacijentId = 5001,
                            RazlogPosjete = "Bol  uhu i glava",
                            TerapijaId = 6001,
                            UputnicaId = 6100
                        },
                        new
                        {
                            PregledId = 6111,
                            Datum = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dijagnoza = "Moguca alergijska reakcija",
                            DoktorId = 3001,
                            PacijentId = 5001,
                            RazlogPosjete = "Moguca alergijska reakcija",
                            TerapijaId = 6001,
                            UputnicaId = 6101
                        },
                        new
                        {
                            PregledId = 6112,
                            Datum = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dijagnoza = "Upala srednjeg uha",
                            DoktorId = 3001,
                            PacijentId = 5001,
                            RazlogPosjete = "Bol  uhu i glava",
                            TerapijaId = 6001,
                            UputnicaId = 6102
                        },
                        new
                        {
                            PregledId = 6113,
                            Datum = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dijagnoza = "Sum na srcu",
                            DoktorId = 3001,
                            PacijentId = 5001,
                            RazlogPosjete = "Otezano kretanje",
                            TerapijaId = 6001,
                            UputnicaId = 6103
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.PreventivneMjere", b =>
                {
                    b.Property<int>("PreventivneMjereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreventivneMjereId"), 1L, 1);

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("Stanje")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PreventivneMjereId");

                    b.HasIndex("PacijentId");

                    b.ToTable("PreventivneMjere", (string)null);

                    b.HasData(
                        new
                        {
                            PreventivneMjereId = 8111,
                            PacijentId = 5003,
                            Stanje = "Alergijska reakcija"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.SistematskiPregled", b =>
                {
                    b.Property<int>("SistematskiPregledId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SistematskiPregledId"), 1L, 1);

                    b.Property<string>("Abdomen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Bmi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("BMI");

                    b.Property<string>("Cula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Datum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ekstremiteti")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GrudniKos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KicmeniStub")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KrvniPritisak")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ObimGrudi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ObimStruka")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("Pluca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PromjenaNaKozi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Puls")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Tezina")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Tonzile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Visina")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Vrat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SistematskiPregledId");

                    b.HasIndex("PacijentId");

                    b.ToTable("SistematskiPregled", (string)null);
                });

            modelBuilder.Entity("eKarton.Service.Databases.Terapija", b =>
                {
                    b.Property<int>("TerapijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerapijaId"), 1L, 1);

                    b.Property<string>("Do")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NazivLijeka")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Od")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Podsjetnik")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Uputa")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TerapijaId");

                    b.ToTable("Terapija", (string)null);

                    b.HasData(
                        new
                        {
                            TerapijaId = 6001,
                            Do = "19.04.2022",
                            NazivLijeka = "Panklav",
                            Od = "12.04.2022",
                            Podsjetnik = "Svako 12 sati",
                            Uputa = "2 puta na dan"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Termin", b =>
                {
                    b.Property<int>("TerminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerminId"), 1L, 1);

                    b.Property<string>("Datum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("Razlog")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Vrijeme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TerminId");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.ToTable("Termin", (string)null);

                    b.HasData(
                        new
                        {
                            TerminId = 7110,
                            Datum = "22.05.2022",
                            DoktorId = 3009,
                            PacijentId = 5001,
                            Razlog = "rutinska kontrola",
                            Vrijeme = "09:15:00"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"), 1L, 1);

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OpisUloge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UlogaId");

                    b.ToTable("Uloga", (string)null);

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Admin",
                            OpisUloge = "Upravljanje sistemom"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Korisnik",
                            OpisUloge = "Pregled podataka"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Uputnica", b =>
                {
                    b.Property<int>("UputnicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UputnicaId"), 1L, 1);

                    b.Property<string>("Datum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Razlog")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UputnicaId");

                    b.ToTable("Uputnica", (string)null);

                    b.HasData(
                        new
                        {
                            UputnicaId = 6100,
                            Datum = "06.02.2022",
                            Naziv = "Posjeta orl doktora",
                            Razlog = "Upala uha",
                            StateMachine = "arhived"
                        },
                        new
                        {
                            UputnicaId = 6101,
                            Datum = "06.02.2022",
                            Naziv = "Alergo-test",
                            Razlog = "Moguca alergija na odredjene proizvode",
                            StateMachine = "draft"
                        },
                        new
                        {
                            UputnicaId = 6102,
                            Datum = "06.02.2022",
                            Naziv = "CTG",
                            Razlog = "neki razlog",
                            StateMachine = "cancelled"
                        },
                        new
                        {
                            UputnicaId = 6103,
                            Datum = "06.02.2022",
                            Naziv = "Endoskopija",
                            Razlog = "Bolovi u prsima",
                            StateMachine = "active"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Vakcinacija", b =>
                {
                    b.Property<int>("VakcinacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VakcinacijaId"), 1L, 1);

                    b.Property<string>("NazivVakcine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VakcinacijaId");

                    b.ToTable("Vakcinacija", (string)null);

                    b.HasData(
                        new
                        {
                            VakcinacijaId = 7111,
                            NazivVakcine = "Pfizer"
                        });
                });

            modelBuilder.Entity("eKarton.Service.Databases.Administrator", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Bolnica", "Bolnica")
                        .WithMany("Administrators")
                        .HasForeignKey("BolnicaId")
                        .IsRequired()
                        .HasConstraintName("FK_Bolnica_Administrator");

                    b.Navigation("Bolnica");
                });

            modelBuilder.Entity("eKarton.Service.Databases.DodjeljeniDoktor", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Doktor", "Doktor")
                        .WithMany("DodjeljeniDoktors")
                        .HasForeignKey("DoktorId")
                        .IsRequired()
                        .HasConstraintName("FK_Doktor_DodjeljeniDoktor");

                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("DodjeljeniDoktors")
                        .HasForeignKey("PacijentId")
                        .IsRequired()
                        .HasConstraintName("FK_Pacijent_DodjeljeniDoktor");

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Doktor", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Odjel", "Odjel")
                        .WithMany("Doktors")
                        .HasForeignKey("OdjelId")
                        .IsRequired()
                        .HasConstraintName("FK_Odjel_Doktor");

                    b.Navigation("Odjel");
                });

            modelBuilder.Entity("eKarton.Service.Databases.KorisnikUloga", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Korisnik", "Korisnik")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("KorisnikId");

                    b.HasOne("eKarton.Service.Databases.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Nalaz", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("Nalazs")
                        .HasForeignKey("PacijentId")
                        .IsRequired()
                        .HasConstraintName("FK_Nalaz_Pacijent");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eKarton.Service.Databases.OcjenaDoktor", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Doktor", "Doktor")
                        .WithMany("OcjenaDoktors")
                        .HasForeignKey("DoktorId")
                        .IsRequired()
                        .HasConstraintName("FK_Doktor_OcjenaDoktor");

                    b.HasOne("eKarton.Service.Databases.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId");

                    b.Navigation("Doktor");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Odjel", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Bolnica", "Bolnica")
                        .WithMany("Odjels")
                        .HasForeignKey("BolnicaId")
                        .IsRequired()
                        .HasConstraintName("FK_Bolnica_Odjel");

                    b.Navigation("Bolnica");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Pacijent", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Korisnik", null)
                        .WithMany("Pacijents")
                        .HasForeignKey("KorisnikId");
                });

            modelBuilder.Entity("eKarton.Service.Databases.PacijentOboljenja", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Oboljenje", "Oboljenje")
                        .WithMany("PacijentOboljenjas")
                        .HasForeignKey("OboljenjeId")
                        .HasConstraintName("FK_Oboljenje_PacijentOboljenja");

                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("PacijentOboljenjas")
                        .HasForeignKey("PacijentId")
                        .HasConstraintName("FK_Pacijent_PacijentOboljenja");

                    b.Navigation("Oboljenje");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eKarton.Service.Databases.PacijentOsiguranje", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Osiguranje", "Osiguranje")
                        .WithMany("PacijentOsiguranjes")
                        .HasForeignKey("OsiguranjeId")
                        .HasConstraintName("FK_Osiguranje_PacijentOsiguranje");

                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("PacijentOsiguranjes")
                        .HasForeignKey("PacijentId")
                        .HasConstraintName("FK_Pacijent_PacijentOsiguranje");

                    b.Navigation("Osiguranje");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eKarton.Service.Databases.PacijentVakcinacija", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("PacijentVakcinacijas")
                        .HasForeignKey("PacijentId")
                        .HasConstraintName("FK_Pacijent_PacijentVakcinacija");

                    b.HasOne("eKarton.Service.Databases.Vakcinacija", "Vakcinacija")
                        .WithMany("PacijentVakcinacijas")
                        .HasForeignKey("VakcinacijaId")
                        .HasConstraintName("FK_Vakcinacija_PacijentVakcinacija");

                    b.Navigation("Pacijent");

                    b.Navigation("Vakcinacija");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Pregled", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Doktor", "Doktor")
                        .WithMany("Pregleds")
                        .HasForeignKey("DoktorId")
                        .IsRequired()
                        .HasConstraintName("FK_Doktor_Pregled");

                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("Pregleds")
                        .HasForeignKey("PacijentId")
                        .IsRequired()
                        .HasConstraintName("FK_Pacijent_Pregled");

                    b.HasOne("eKarton.Service.Databases.Terapija", "Terapija")
                        .WithMany("Pregleds")
                        .HasForeignKey("TerapijaId")
                        .IsRequired()
                        .HasConstraintName("FK_Terapija_Pregled");

                    b.HasOne("eKarton.Service.Databases.Uputnica", "Uputnica")
                        .WithMany("Pregleds")
                        .HasForeignKey("UputnicaId")
                        .IsRequired()
                        .HasConstraintName("FK_Uputnica_Pregled");

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");

                    b.Navigation("Terapija");

                    b.Navigation("Uputnica");
                });

            modelBuilder.Entity("eKarton.Service.Databases.PreventivneMjere", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("PreventivneMjeres")
                        .HasForeignKey("PacijentId")
                        .IsRequired()
                        .HasConstraintName("FK_Pacijent_Mjere");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eKarton.Service.Databases.SistematskiPregled", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("SistematskiPregleds")
                        .HasForeignKey("PacijentId")
                        .IsRequired()
                        .HasConstraintName("FK_Pacijent_SistematskiPregled");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Termin", b =>
                {
                    b.HasOne("eKarton.Service.Databases.Doktor", "Doktor")
                        .WithMany("Termins")
                        .HasForeignKey("DoktorId")
                        .IsRequired()
                        .HasConstraintName("FK_Doktor_Termin");

                    b.HasOne("eKarton.Service.Databases.Pacijent", "Pacijent")
                        .WithMany("Termins")
                        .HasForeignKey("PacijentId")
                        .IsRequired()
                        .HasConstraintName("FK_Pacijent_Termin");

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Bolnica", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Odjels");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Doktor", b =>
                {
                    b.Navigation("DodjeljeniDoktors");

                    b.Navigation("OcjenaDoktors");

                    b.Navigation("Pregleds");

                    b.Navigation("Termins");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Korisnik", b =>
                {
                    b.Navigation("KorisnikUlogas");

                    b.Navigation("Pacijents");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Oboljenje", b =>
                {
                    b.Navigation("PacijentOboljenjas");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Odjel", b =>
                {
                    b.Navigation("Doktors");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Osiguranje", b =>
                {
                    b.Navigation("PacijentOsiguranjes");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Pacijent", b =>
                {
                    b.Navigation("DodjeljeniDoktors");

                    b.Navigation("Nalazs");

                    b.Navigation("PacijentOboljenjas");

                    b.Navigation("PacijentOsiguranjes");

                    b.Navigation("PacijentVakcinacijas");

                    b.Navigation("Pregleds");

                    b.Navigation("PreventivneMjeres");

                    b.Navigation("SistematskiPregleds");

                    b.Navigation("Termins");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Terapija", b =>
                {
                    b.Navigation("Pregleds");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Uputnica", b =>
                {
                    b.Navigation("Pregleds");
                });

            modelBuilder.Entity("eKarton.Service.Databases.Vakcinacija", b =>
                {
                    b.Navigation("PacijentVakcinacijas");
                });
#pragma warning restore 612, 618
        }
    }
}
